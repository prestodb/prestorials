{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#presto-workshop-deploying-presto-c-and-benchmarking-with-pbench","title":"Presto Workshop - Deploying Presto C++ and Benchmarking with pbench","text":"<p>Welcome to our Presto C++ workshop! This workshop will provide an overview of Presto C++, the next-gen native Presto worker. You will learn how to deploy Presto C++ with Docker Compose on your machine and set up a local file-based data source. We will then demonstrate how to run queries manually with Presto CLI and run the new-open source benchmarking tool pbench. Then, you will deploy a similar Presto Java cluster to compare the execution time with Presto C++ on a TPC-DS benchmark.</p> <p>By the end of the workshop, you will know</p> <ul> <li>What Presto C++ is and its benefits</li> <li>How to set up and deploy Presto C++ with Docker Compose locally</li> <li>How to use the Presto CLI to run queries</li> <li>How to use pbench to run benchmarks and view results</li> <li>How to get a quantified speed-up factor of Presto C++ vs Java</li> </ul>"},{"location":"#about-this-workshop","title":"About this workshop","text":"<p>The introductory page of the workshop is broken down into the following sections:</p> <ul> <li>Agenda</li> <li>Compatibility</li> <li>Technology Used</li> <li>Credits</li> </ul>"},{"location":"#agenda","title":"Agenda","text":"Part 1 Set-up and deployment of Presto C++ and Java locally Part 2 Downloading and running pbench"},{"location":"#compatibility","title":"Compatibility","text":"<p>This workshop has been tested on the following platforms:</p> <ul> <li>MacOS: Apple Silicon (M-series chips)</li> <li>Windows 11: x86_64</li> <li>Linux: x86_64</li> </ul>"},{"location":"#technology-used","title":"Technology Used","text":"<ul> <li>Docker: A container engine to run several applications in self-contained containers</li> <li>Docker Compose: A YAML-based tool for defining and running multi-container applications</li> <li>Presto: Fast and Reliable SQL Engine for Data Analytics and the Open Lakehouse</li> <li>pbench: A new, open-source benchmarking tool for Presto</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Pramod Satya</li> <li>Andrew Xie</li> <li>Allen Shen</li> </ul>"},{"location":"deploy-presto/","title":"Deploying Presto with Docker Compose","text":""},{"location":"deploy-presto/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"deploy-presto/#1-set-up","title":"1. Set Up","text":""},{"location":"deploy-presto/#11-pull-images","title":"1.1 Pull images","text":"<p>Pull the Presto images first to allow time for downloading based on your operation system.</p> <p>For MacOS M Chip: <pre><code>docker pull prestodb/presto:latest\ndocker pull public.ecr.aws/oss-presto/presto-native:0.289-ubuntu-arm64\n</code></pre></p> <p>For Windows 11 and Linux: <pre><code>docker pull prestodb/presto:latest\ndocker pull public.ecr.aws/oss-presto/presto-native:0.289-20240719122003-30c4804\n</code></pre></p>"},{"location":"deploy-presto/#21-clone-repo","title":"2.1 Clone repo","text":"<p>Clone the prestodb/prestorials repository which contains the Docker Compose files used for deploying Presto.</p> <pre><code>git clone https://github.com/prestodb/prestorials.git\n</code></pre> <p>Then change directory into the cloned repository.</p> <pre><code>cd prestorials\n</code></pre>"},{"location":"deploy-presto/#2-set-up-data","title":"2. Set Up Data","text":""},{"location":"deploy-presto/#21-download-data","title":"2.1 Download data","text":"<p>Download the data.tar file here.</p> <p>This file contains the TPC-DS and TPCH tables needed to set up a local Hive metastore.</p>"},{"location":"deploy-presto/#22-prepare-data","title":"2.2 Prepare data","text":"<p>After downloading, we need to move the data to the directories needed for Presto to detect them.</p> <p>Copy the data.tar file to the following directories (within <code>prestorials</code>) and extract:</p> <pre><code>docker-compose\ndocker-compose-native/prestissimo\n</code></pre> <p>After extracting, you should see the data directories created:</p> <pre><code>docker-compose/data\ndocker-compose-native/prestissimo/data\n</code></pre> <p>The <code>tpcds</code> and <code>tpch</code> directories should also be created in the <code>/data</code> directories. The <code>data.tar</code> file can then be deleted as it is no longer needed.</p>"},{"location":"deploy-presto/#3-deploying-presto","title":"3. Deploying Presto","text":"<p>Now that setup is complete, we can run the docker compose file and use Presto CLI to run queries.</p>"},{"location":"deploy-presto/#31-deploying-presto-java","title":"3.1 Deploying Presto Java","text":"<p>Change into the <code>docker-compose</code> directory in <code>prestorials</code> and run the following command to start the Presto Java cluster:</p> <p>For MacOS M Chip: <pre><code>cd docker-compose\ndocker compose -v -f docker-compose-arm64.yaml up\n</code></pre></p> <p>For Windows 11 and Linux: <pre><code>cd docker-compose\ndocker compose -v -f docker-compose.yaml up\n</code></pre></p>"},{"location":"deploy-presto/#32-deploying-presto-c","title":"3.2 Deploying Presto C++","text":"<p>Change into the <code>docker-compose-native</code> directory in <code>prestorials</code> and run the following command to start the Presto C++ cluster.</p> <p>For MacOS M Chip: <pre><code>cd docker-compose-native\ndocker compose -v -f docker-compose-arm64.yaml up\n</code></pre></p> <p>For Windows 11 and Linux: <pre><code>cd docker-compose\ndocker compose -v -f docker-compose-amd64.yaml up\n</code></pre></p> <p>You should now see the logs of the Presto coordinator and worker starting up. The cluster is ready once you see something similar to the following log messages:</p> <pre><code>coordinator  | 2024-07-25T23:48:15.077Z INFO    main    com.facebook.presto.server.PrestoServer ======== SERVER STARTED ========\nworker_2     | I0725 23:48:39.584002     8 PeriodicServiceInventoryManager.cpp:118] Announcement succeeded: HTTP 202. State: active.\nworker_1     | I0725 23:48:41.484305     8 PeriodicServiceInventoryManager.cpp:118] Announcement succeeded: HTTP 202. State: active.\n</code></pre>"},{"location":"deploy-presto/#4-using-presto-cli","title":"4 Using Presto CLI","text":"<p>After deploying a Presto cluster and confirming that the server started, run the Presto CLI from the coordinator container: <pre><code>docker exec -it coordinator /opt/presto-cli\n</code></pre> While in Presto CLI, verify that the schemas exist and use hive.tpcds for example: <pre><code>SHOW schemas in hive;\nUSE hive.tpcds;\nSHOW tables;\n</code></pre></p>"},{"location":"resources/CONTRIBUTORS/","title":"Contributors","text":""},{"location":"resources/CONTRIBUTORS/#andrew-xie","title":"Andrew Xie","text":"<ul> <li>Github</li> </ul>"},{"location":"resources/CONTRIBUTORS/#allen-shen","title":"Allen Shen","text":"<ul> <li>Github</li> </ul>"},{"location":"resources/CONTRIBUTORS/#pramod-satya","title":"Pramod Satya","text":"<ul> <li>Github</li> </ul>"},{"location":"resources/RESOURCES/","title":"Additional resources","text":""},{"location":"resources/RESOURCES/#presto","title":"Presto","text":"<ul> <li>Presto</li> <li>Presto Documentation</li> <li>Pbench Wiki</li> </ul>"},{"location":"running-pbench/","title":"Running pbench","text":"<p>At this point, you should already have a Presto C++ or Presto Java cluster with Docker Compose running.</p>"},{"location":"running-pbench/#1-download-pbench","title":"1. Download pbench","text":""},{"location":"running-pbench/#11-download-the-pbench-tar","title":"1.1 Download the pbench tar","text":"<p>Download the pbench tar for your platform below. This contains the compiled pbench binary and the relevant benchmark configuration files.</p> <ul> <li>MacOS (ARM)</li> <li>MacOS (x86)</li> <li>Linux (x86)</li> <li>Linux (ARM)</li> </ul>"},{"location":"running-pbench/#12-extract-pbench","title":"1.2 Extract pbench","text":"<p>Extract the downloaded tar.gz file and change into the created <code>pbench</code> directory in a new terminal window.</p> <pre><code>cd pbench\n</code></pre>"},{"location":"running-pbench/#2-run-pbench","title":"2. Run pbench","text":"<p>Once in the <code>pbench</code> directory, run pbench with <code>./pbench run</code> and specify the benchmark configuration files related to the run. This example uses the sf1 scale factor and ds_power run flavor, which runs all 99 TPC-DS queries sequentially.</p> <p>For Presto C++:</p> <pre><code>./pbench run benchmarks/native_oss.json benchmarks/tpc-ds/sf1.json benchmarks/tpc-ds/ds_power.json\n</code></pre> <p>For Presto Java: <pre><code>./pbench run benchmarks/java_oss.json benchmarks/tpc-ds/sf1.json benchmarks/tpc-ds/ds_power.json\n</code></pre></p> <p>You should see logs for each query being submitted and the results, including execution time and row count.</p> <p>Supplying different json files allow you to run different benchmarks. For more information on this format, visit the pbench wiki.</p>"},{"location":"running-pbench/#troubleshooting","title":"Troubleshooting","text":"<p>If you see a permissions pop-up that prevents running pbench on MacOS, run the following command on the downloaded .tar.gz file before extracting:</p> <p><pre><code>xattr -d com.apple.quarantine pbench_darwin_arm64.tar.gz\n</code></pre> Change this command depending on the pbench file you downloaded.</p>"}]}